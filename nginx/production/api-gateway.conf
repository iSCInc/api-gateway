server {
  listen 8100 default_server;
  server_name "" [::]:8100;
  resolver 127.0.0.1:8600;
  proxy_set_header X-Forwarded-For $remote_addr;
  header_filter_by_lua_file "$api_gateway_root/src/nginx/scripts/add_cors_headers.lua";

  access_log /var/log/nginx/api-gateway.access.log log_format_with_perf;
  error_log /var/log/nginx/api-gateway.error.log;

  set_by_lua_file $stripped_uri "$api_gateway_root/src/nginx/scripts/strip_service_name_from_uri.lua";

  location /healthcheck {
    content_by_lua 'ngx.say("OK")';
  }

  location /helios {
    deny all;
  }

  location /auth {
    proxy_pass_request_headers off;

    # FIXME: This is not intended to be a long term solution. Remove once
    # authentication is separated from helios and is internal only.
    location ~ ^/auth/(info|users/(\w+)/tokens) {
      deny all;
    }

    # FIXME: See above. These too should not be special cased. But, until we
    # can separate this functionality we need to do our best to prevent abuse.
    location ~ ^/auth/(token|users|facebook/users) {
      limit_req zone=registration burst=2 nodelay;

      content_by_lua '
        local router = require("nginx/router")
        return router.route()
        ';
    }

    content_by_lua '
      local router = require("nginx/router")
      return router.route()
      ';
  }

  location / {
    rewrite ^/service/(.*)$ /$1 break;
    proxy_pass_request_headers off;
    content_by_lua '
      local router = require("nginx/router")
      return router.route()
      ';
  }

  location /token {
    internal;
    set_by_lua $token_info_url '
      local config = require("config")
      local upstream = require("upstream")
      local auth_service = upstream.find(config.AUTH_UPSTREAM_NAME)
      return string.format("http://%s/info?code=%s", auth_service, ngx.var.arg_code)
    ';

    proxy_pass $token_info_url;
  }

  location @service {
    set_by_lua $upstream '
      local upstream = require("upstream")
      return upstream.find(ngx.var.request_uri);
    ';

    access_by_lua '
      if ngx.var.upstream == "__not_found" then
        ngx.status = ngx.HTTP_NOT_FOUND
        ngx.say("Invalid service resource")
      else
        return
      end';

    proxy_pass http://$upstream/$stripped_uri;
  }
}
